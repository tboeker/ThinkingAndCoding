parameters:
  - name: VariablesFile1
    type: string
    default: 'variables.yml'
  
  - name: VariablesFile2
    type: string
    default: 'variables-root-dev.yml'
  
  - name: CommandOptions
    type: string
    default: ''

  - name: WorkingDirectory
    type: string
    default: 'dev'

  - name: StageName
    type: string
    default: 'Stage1'
  
  - name: StageCondition
    type: object
    default: succeeded()
   
  - name: Env
    type: object
    default: {}
  
stages:
  - stage: ${{ parameters.StageName }}
    condition: ${{ parameters.StageCondition }}

    variables:

    - template: '${{ parameters.VariablesFile1 }}'
    - template: '${{ parameters.VariablesFile2 }}'

    displayName: ${{ variables.EnvironmentName }}
    jobs:

    - job: prepare_backend
      pool:
        vmImage: 'ubuntu-latest'
      displayName: Prepare Backend Storage
      steps:
        - checkout: none

        - task: printAllVariables@1

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: drop
            path: $(Pipeline.Workspace)/drop

        - script: echo '${{ variables.ARM_SERVICE_CONNECTION }}' $(ARM_SERVICE_CONNECTION)

        - task: AzureCLI@2
          name: tf_storage
          displayName: az cli storage backend
          inputs:
            azureSubscription: '${{ variables.ARM_SERVICE_CONNECTION }}'
            # azureSubscription: az-tb-thinking-and-coding-terraform-mvd-msdn
            scriptType: pscore
            workingDirectory: $(Pipeline.Workspace)/drop/scripts/
            scriptPath: $(Pipeline.Workspace)/drop/scripts/prepare-backend-storage.ps1

    - deployment: deploy
      pool:
        vmImage: 'ubuntu-latest'
      displayName: Deploy Terraform
      dependsOn: prepare_backend
      environment: ${{ variables.EnvironmentName }}

      variables:
        TF_BACKEND_STORAGE_ACCOUNT_KEY: $[ dependencies.prepare_backend.outputs['tf_storage.BACKEND_STORAGE_ACCOUNT_KEY'] ]

      strategy:
        runOnce:
          deploy:
            steps:
              - task: printAllVariables@1
              
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: drop
                  path: $(Pipeline.Workspace)/drop

              - task: TerraformInstaller@0
                inputs:
                  terraformVersion: '0.12.29'

              - task: TerraformTaskV1@0
                displayName: terraform init
                inputs:
                  provider: 'azurerm'
                  backendServiceArm: '${{ variables.TF_BACKEND_SERVICE_CONNECTION }}'
                  backendAzureRmResourceGroupName: $(TF_BACKEND_RESOURCE_GROUP_NAME)
                  backendAzureRmStorageAccountName: $(TF_BACKEND_STORAGE_ACCOUNT_NAME)
                  backendAzureRmContainerName: $(TF_BACKEND_STORAGE_CONTAINER_NAME)
                  backendAzureRmKey: 'terraform.tfstate'
                  # backendAzureRmKey: $(TF_BACKEND_STORAGE_ACCOUNT_KEY)
                  workingDirectory: $(Pipeline.Workspace)/drop/tf/${{ parameters.WorkingDirectory }}
                  command: 'init'
                  commandOptions: '${{ parameters.CommandOptions }}'

              - task: TerraformTaskV1@0
                displayName: terraform plan
                inputs:
                  provider: 'azurerm'
                  backendServiceArm: '${{ variables.TF_BACKEND_SERVICE_CONNECTION }}'
                  backendAzureRmResourceGroupName: $(TF_BACKEND_RESOURCE_GROUP_NAME)
                  backendAzureRmStorageAccountName: $(TF_BACKEND_STORAGE_ACCOUNT_NAME)
                  backendAzureRmContainerName: $(TF_BACKEND_STORAGE_CONTAINER_NAME)
                  backendAzureRmKey: 'terraform.tfstate'
                  # backendAzureRmKey: $(TF_BACKEND_STORAGE_ACCOUNT_KEY)
                  workingDirectory: $(Pipeline.Workspace)/drop/tf/${{ parameters.WorkingDirectory }}
                  command: 'plan'
                  commandOptions: '${{ parameters.CommandOptions }}'
                  environmentServiceNameAzureRM: '${{ variables.ARM_SERVICE_CONNECTION }}'

              - task: TerraformTaskV1@0
                displayName: terraform apply
                inputs:
                  provider: 'azurerm'
                  backendServiceArm: '${{ variables.TF_BACKEND_SERVICE_CONNECTION }}'
                  backendAzureRmResourceGroupName: $(TF_BACKEND_RESOURCE_GROUP_NAME)
                  backendAzureRmStorageAccountName: $(TF_BACKEND_STORAGE_ACCOUNT_NAME)
                  backendAzureRmContainerName: $(TF_BACKEND_STORAGE_CONTAINER_NAME)
                  backendAzureRmKey: 'terraform.tfstate'
                  # backendAzureRmKey: $(TF_BACKEND_STORAGE_ACCOUNT_KEY)
                  workingDirectory: $(Pipeline.Workspace)/drop/tf/${{ parameters.WorkingDirectory }}
                  command: 'apply'
                  commandOptions: '${{ parameters.CommandOptions }}'
                  environmentServiceNameAzureRM: '${{ variables.ARM_SERVICE_CONNECTION }}'                  
             
